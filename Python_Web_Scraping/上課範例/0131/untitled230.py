# -*- coding: utf-8 -*-
"""Untitled230.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eLl-CZdO_HAdG-Hh4JFXaEqGo3lv-5Lq
"""

#迴歸: 單純線性回歸; 多元線性回歸
# 邏輯斯回歸 (二元分類)
# KNN 最近鄰居 分類
# 決策樹 分類
# 共享單車, 房屋價格, 葡萄酒

# 類神經網路
# 辨識手寫數字
# 特徵 feature : 使用於模型資料
# 數字, 純量 (scalar), 向量 (vector), 矩陣, 陣列
x = 9487 #scalar -> 0 階 tensor
y = [9, 4, 8, 7] # vector 1 階 tensor
z = [[9, 4],[8, 7]] # 2 階 tensor
#tensor 張量

import numpy as np
import matplotlib.pyplot as plt
x = np.array([[9], [4], [8], [7]])
x

x.shape #每個資料都只有值, 所以是 純量 的概念
#3分鐘練習, 6:56

#向量
y = np.array([[9, 4, 8, 7], [8, 7, 4, 5]])
y

y.shape

a = y[0]
b = y[1]
a

a.reshape(2, 2)
#3分鐘練習, 7:03

#分類類型資料進行編碼 One-Hot Encoding
from tensorflow.keras.utils import to_categorical
x = [0,1, 2, 3,4, 5]
x_1 = to_categorical(x, 6)
x_1
#3分鐘練習,7:10

# 類神經網路 -> 深度學習
# 需要大量資料, 一個類別 1000 筆

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.datasets import mnist
# 7:20 完成

(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train.shape
#3分鐘完恆, 7:26

x_train[1]
plt.imshow(x_train[1], cmap='Greys')
y_train[1]
#包含第一節課的休息, 7:43 繼續

x_train = x_train.reshape(60000, 784)/255 #除255 可以讓值改變成 0 到 1 之間
x_test = x_test.reshape(10000, 784)/255
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)
y_train.shape

y_train[0]
#3分鐘練習, 7:52

model = Sequential()
model.add(Dense(100, input_dim=784, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(100, activation='relu'))
model.add(Dense(10, activation='softmax'))
model.compile(loss='mse', optimizer=SGD(learning_rate=0.087), metrics=['accuracy'])
model.summary()
#5分鐘完成, 8:05

model.fit(x_train, y_train, batch_size=100, epochs=20)
#5分鐘訓練完成, 8:13

x_test[0].shape
inp = x_test[0].reshape(1, 784)
model.predict(inp)
y_predict = np.argmax(model.predict(inp), axis=-1)
y_predict
#3分鐘練習, 8:22

y_predict = np.argmax(model.predict(x_test), axis=-1)

n = 1002
print('類神經網路預測的結果是: ', y_predict[n])
plt.imshow(x_test[n].reshape(28, 28), cmap='Greys')
plt.show()
#3分鐘練習, 8:32
#第二節休息至 8:45

from ipywidgets import interact_manual
def test(測試編號):
  plt.imshow(x_test[測試編號].reshape(28, 28), cmap='Greys')
  print('類神經網路判斷為: ', y_predict[測試編號])

interact_manual(test, 測試編號=(0, 9999))
#5分鐘練習, 9:00

score = model.evaluate(x_test, y_test)

print('loss: ', score[0])
print('正確率: ', score[1])

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/Colab Notebooks'

model.save('pan__dnn_model')
#5分鐘練習, 9:15

# 讀取自己儲存的 model
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/Colab Notebooks'

from tensorflow.keras.models import load_model
model_new = load_model('pan__dnn_model')

#5分鐘練習, 9:30

!pip install openai

import openai
reply = opena.ChatCompletion.care(
    model
    mesage
)