# -*- coding: utf-8 -*-
"""0108.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j3isS6c99Q4XuJ5GICW8pJTaglA1GeDF
"""

#陣列, 向量 (一個維度的陣列 1D)運算

#a = [a1, a2, a3] #向量
#s = 5 #純量 (Scalar)
#c = a + s = [a1+s, a2+s, a3+s]

import numpy as np
a = np.array([1, 2, 3])
print('a=' + str(a))
s = 5
print('s=' + str(s))
b = a + s
print('a+s=', str(b)) #向量的加法運算

#3分鐘練習, 6:53

#你自己試試減法運算 b = a - s , 二分鐘
b = a - s
print('a-s=' + str(b))

#你自己試試乘法運算 b = a * s, 二分鐘
b = a * s
print('a*s=' + str(b))

a = np.array([1, 2, 3])
c = np.array([4, 5, 6])
d = a + c
print(str(d))

# a = [1, 2, 3] list; np.array([1, 2, 3])
# 向量與向量之間的運算
d = a * c
print(str(d))

#3分鐘練習, 7:05

#向量 點積 運算 - Dot Product
a = np.array([1, 2, 3])
print('a=' + str(a))
s = np.array([4, 5, 6])
print('s='+str(s))
b = a.dot(s)
print('a.dot(s)=' + str(b))  # 1*4, 2*5, 3*6
# 3 分鐘練習, 7: 12

#向量 與 布林值 遮罩 (mask)
a = np.array([14, 8, 10, 11, 6, 3, 18, 13, 12, 9])
print('a='+str(a))
mask = (a % 3 == 0) #建立布林值陣列
print('mask=' + str(mask))
b = a[mask] #使用布林值陣列取出值
print('b='+str(b))

#3 分鐘練習, 7:20

#陣列的函式
# ravel(), flatten() -> 把陣列拉平 -> 一個維度
a = np.array([[1, 2, 3], [4, 5, 6]])
b = a.ravel()
print(str(b))

# reshape -> 改變陣列的形狀
c = np.reshape(b, (2, 3))
print(str(c))

#第一節休息10分鐘, 7:40 繼續

# Pandas -> Python and data analysis
  # 索引陣列結構 Series, DataFrame 物件
  # 多層次的階層索引
  # Agrregating, Transform
  # 檔案讀取, 轉換,純存

import pandas as pd
# 自訂索引
fruits = ['蘋果', '橘子', '梨子', '櫻桃', '蓮霧', '釋迦']
s = pd.Series([12, 29, 72, 4, 8, 10], index=fruits)
print(s)

#3分鐘練習, 7:53

print('橘子=', s['橘子'])
print(s[['梨子', '蓮霧', '釋迦']])
print((s+2)*3)

#3分鐘練習, 7:59

# DataFrame (Excel, Table)
# 資料來源: excel, csv, 資料庫, 字典 dict

dists = {'name':['中正區', '板橋區', '桃園區', '北屯區',
                 '安南區', '三民區', '大安區', '永和區',
                 '八德區', '前鎮區', '鳳山區',
                 '信義區', '新店區'],
         'population': [159598, 551452, 44287, 275207,
                        192327, 343203, 309835, 222531,
                        198473, 189623, 359125,
                        225561, 302070],
         'city': ['台北市', '新北市', '桃園市', '台中市',
                  '台南市', '高雄市', '台北市', '新北市',
                  '桃園市', '高雄市', '高雄市',
                  '台北市', '新北市'] }

ordinals = ['第一選區', '第二選區', '第三選區', '第四選區', '第五選區', '第六選區', '第七選區', '第八選區', '第九選區', '第十選區', '第十一選區', '第十二選區', '第十三選區']

#請完成上面 dictionary 資料, 至 8:14
df = pd.DataFrame(dists, columns = ['name', 'population', 'city'], index = ordinals)
print(df)

# 3 分鐘練習, 8:26

df.to_html('ex01.html')

df2 = pd.DataFrame(dists, columns= ['name', 'population'], index = dists['city'])
print(df2)
#3分鐘練習, 8:31

#第二節課休息10分鐘, 8:42 繼續
# to_csv(), to_json, to_html, to_excel, to_sql
# read_csv(), read_json, read_html, read_sql

df.to_csv('dists2.csv', index=False, encoding='utf8')

df.to_json('dists.json')
#3 分鐘練習, 8:50

df.head(3)
df.tail(2)
len(df)
df.shape

#使用 iterrows() 函數走訪 DataFrame 物件
for index, row in df.iterrows():
  print(index, row['city'], row['name'], row['population'])
  print('--------------------------------------------------')

# 3 分鐘練習, 9:00

# DataFrame 資料的過濾和排序
print(df.population > 350000)
print(df['city'].isin(['台北市', '高雄市']))
#3分鐘練習, 9:06

# 資料的新增與刪除
df
df.loc['第一選區'] = ['士林區', 288340, '台北市']
print(df.tail(3))

s = pd.Series({'city':'新北市', 'name':'中和區', 'population':413291})
df3 = df.append(s, ignore_index=True)
df3

df3.drop([13])
#3分鐘練習, 9:17

# 分群 (Grouping), 樞紐分析
df = pd.DataFrame({'名稱': ['客戶A', '客戶B', '客戶A', '客戶B', '客戶A', '客戶B', '客戶A', '客戶A'],
                   '編號':['訂單1', '訂單1', '訂單2', '訂單3', '訂單2', '訂單1', '訂單1', '訂單3'],
                   '數量': np.random.randint(1,5, size=8),
                   '售價': np.random.randint(150, 500, size=8)
                   })
df
#3分鐘時間建立資料, 9: 27

print(df.groupby('名稱').sum())
print('-----------------------')
df.groupby(['名稱', '編號']).sum()

#樞紐分析 pivot_table
pivot_a = df.pivot_table(index='名稱', columns='編號', values='售價')
pivot_b = df.pivot_table(index='名稱', columns='編號', values='數量')
print(pivot_a)
print('---------------------')
print(pivot_b)