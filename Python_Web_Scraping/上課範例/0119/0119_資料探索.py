# -*- coding: utf-8 -*-
"""0119_資料探索.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UXqZb0dwRDwNX4_iuqOWAFR3z959yGGY
"""

#探索性資料分析
#1. 資料清理: 多餘字元,取出想分析的目標資料;處理遺漏值
#2. 資料整理: 轉換成可以處理的資料格式 (csv, pandas data frame)

#處理遺漏值: 直接不要; 補值: 固定值, 平均值

import pandas as pd
df = pd.read_csv('test.csv')
print(df)
#3分鐘完成, 6:50

#NaN, nan (NumPy) 空值 (null)
df.info()

#刪除 NaN 的資料
df1 = df.dropna()
print(df1)
#3分鐘練習, 6:58

df2 = df.dropna(how='all')
print(df2)

df3 = df.dropna(subset=['B', 'C'])
print(df3)
#3分鐘練習, 7:04

df1 = df.fillna(value=1)
print(df1)

df['B'] = df['B'].fillna(df['B'].mean()) #.mean()  .median()
#練習將 C 與 D 欄位用平均值取代 NaN 值
#5分鐘練習, 7:15

#重複資料
df = pd.read_csv('test2.csv')
print(df)

print(df.duplicated('B'))

df1 = df.drop_duplicates()
print(df1)
#3分鐘練習, 7:25

#分類類型的資料: 性別, 季節 -> 分類的編碼
from sklearn import preprocessing
df = pd.read_csv('test3.csv')
print(df)
print('-------------------------------')

le = preprocessing.LabelEncoder()
df['性別'] = le.fit_transform(df['性別'])
df['尺寸'] = le.fit_transform(df['尺寸'])
print(df)
#將性別, 尺寸都進行編碼動作, 5分鐘完成, 7:36
#第一節休息, 7: 48

print(titanic.head())

titanic = pd.read_csv('titanic_data.csv')
print(titanic.shape)
#3分鐘完成, 7:54

print(titanic.head())

print(titanic.describe()) #描述統計

print(titanic.info())
#3分鐘練習, 8:00

import numpy as np
print(np.unique(titanic['PassengerId'].values).size)
titanic.set_index(['PassengerId'], inplace=True)
print(titanic.head())
#將 PassengerId 設定成資料的索引欄位, 設定前有做唯一值檢查
#5分鐘練習, 8:14

titanic['SexCode'] = np.where(titanic['Sex']=='female', 1, 0)
print(titanic.head())
#3分鐘練習, 8:21

class_mapping = {'1st':1,
                 '2nd':2,
                 '3rd':3}

titanic['PClass'] = titanic['PClass'].map(class_mapping)
print(titanic.head())
#3分鐘練習, 8:27

print(titanic.isnull().sum())

#補充 Age 欄位的缺漏值
avg_age = titanic['Age'].mean()
titanic['Age'].fillna(avg_age, inplace=True)
print(titanic.isnull().sum())
#練習時間+第二節休息時間 8:48 繼續

print(titanic)
#開始探索分析資料
titanic['Died'] = np.where(titanic['Survived'] == 0, 1, 0)
print(titanic.head())
#3分鐘練習, 8:55

titanic['Age'].plot(kind='hist', bins=15)
df = titanic[titanic.Survived == 0]
df['Age'].plot(kind='hist', bins=15)
df = titanic[titanic.Survived == 1]
df['Age'].plot(kind='hist', bins=15)
#5分鐘時間練習, 9:07

url = 'https://data.gov.tw/dataset/40448'
df = pd.read_csv('aqx.csv', usecols=['sitename', 'aqi', 'co', 'o3', 'pm10', 'pm2.5', 'no2', 'no'],
                 index_col='sitename')
print(df)
#3分鐘練習, 9:22

df.head(20)
df.info()

df1 = df.dropna(how='any')
df1.info()

df1.describe() #3分鐘練習, 9:30

import matplotlib.pyplot as plt
import seaborn as sns
sns.pairplot(df1, kind='reg') #regression 回歸線
plt.show()
print(df.corr())